library(RecordLinkage)
data(RLdata500)
minidata <- RLdata500[-c(2,4)]
rl_data_500_b26 <- adply(1:5, .margins=1, .fun = eval.blocksetup,  dat=minidata, b=26, .expand=F,key=identity.RLdata500)
install.packages("dplyr")
rl_data_500_b26 <- adply(1:5, .margins=1, .fun = eval.blocksetup,  dat=minidata, b=26, .expand=F,key=identity.RLdata500)
library(dplyr)
rl_data_500_b26 <- adply(1:5, .margins=1, .fun = eval.blocksetup,  dat=minidata, b=26, .expand=F,key=identity.RLdata500)
install.packages("plry")
install.packages("pylr")
install.packages("plyr")
library(plyr)
rl_data_500_b26 <- adply(1:5, .margins=1, .fun = eval.blocksetup,  dat=minidata, b=26, .expand=F,key=identity.RLdata500)
confusion.from.blocking <- function(blocking, true_ids, recall.only=FALSE) {
# convert blocking into a vector of labels
nn <- sum(sapply(blocking,length))
block.ids = rep(NA, nn)
for(ii in 1:length(blocking))  block.ids[blocking[[ii]]] = ii
# For each pair of records, check whether they are in the same block
candidate.pairs = combn(length(block.ids), 2)
same.block <- block.ids[candidate.pairs[1,]] == block.ids[candidate.pairs[2,]]
same.truth <- true_ids[candidate.pairs[1,]] == true_ids[candidate.pairs[2,]]
#same.block <- outer(block.ids,block.ids,"==")
# For each pair of records, check whether the true ids match
#same.truth <- outer(true_ids,true_ids,"==")
# table same-block vs. same-truth
confusion <- table(same.block,same.truth, dnn=c("same block?","actually same?"))
# In the confusion matrix, rows refer to the blocks and columns refer to the truth
false.positives <- confusion[2,1]
false.negatives <- confusion[1,2]
true.positives <- confusion[2,2]
true.negatives <- confusion[1,1]
recall <- true.positives/(false.negatives + true.positives)
#true.positives <- confusion[2,2]
#misses <- confusion[1,2]
#recall <- true.positives/(true.positives+misses)
#precision <- true.positives/(same.truth)
if (recall.only) {
return(recall)
} else {
return(return(list(confusion,
recall = true.positives/(false.negatives + true.positives),
precision = true.positives/(true.positives + false.positives),
fpr = false.positives/(false.positives + true.negatives),
fnr = false.negatives/(false.negatives + true.positives),
accuracy = (true.positives + true.negatives)/(true.positives + 	true.negatives + false.negatives + false.positives),
specificity = true.negatives/(true.negatives + false.positives))))
}
}
#' Returns the block ids associated with a blocking method.
#'
#' @import blink
#' @param blocking A list of the blocks.
#' @return A list of the blocks ids that corresponds to each block
#' @export
#' @examples
#' tlsh.blocks <- block_setup_v2(RLdata500, p=20, num.blocks=5, k=2)
#' block.ids.from.blocking(klsh.blocks)
block.ids.from.blocking <- function(blocking) {
nn <- sum(sapply(blocking,length))
block.ids = rep(NA, nn)
for(ii in 1:length(blocking))block.ids[blocking[[ii]]] = ii
return(block.ids)
}
#' Returns the reduction ratio associated with a blocking method
#'
#' @import blink
#' @import utils
#' @param block.labels A list of the blocks labels.
#' @return The reduction ratio
#' @export
#' @examples
#' tlsh.blocks <- block_setup_v2(RLdata500, p=20, num.blocks=5, k=2)
#' block.ids <- block.ids.from.blocking(klsh.blocks)
#' reduction.ratio(block.ids)
reduction.ratio <- function(block.labels) 1 - sum(choose(table(block.labels),2)) / choose(length(block.labels),2)
#' Returns the reduction ratio associated with a blocking method
#'
#' @import blink
#' @param blocking The actual blocks
#' @return The reduction ratio
#' @export
#' @examples
#' tlsh.blocks <- block_setup_v2(RLdata500, p=20, num.blocks=5, k=2)
#' reduction.ratio.from.blocking(klsh.blocks)
reduction.ratio.from.blocking <- function(blocking) {
reduction.ratio(block.ids.from.blocking(blocking))
}
rl_data_500_b26 <- adply(1:5, .margins=1, .fun = eval.blocksetup,  dat=minidata, b=26, .expand=F,key=identity.RLdata500)
head(data <- RLdata500[-c(2,4)])
eval.blocksetup(RLdata500, k=5, b=22, key=identity.RLdata500)
tlsh.blocks <- block_setup_v2(RLdata500, p=20, num.blocks=5, k=2)
library(tlsh)
tlsh.blocks <- block_setup_v2(RLdata500, p=20, num.blocks=5, k=2)
ead(data <- RLdata500[-c(2,4)])
head(data <- RLdata500[-c(2,4)])
minidata <- data[1:2,]
head(all_the_shingles <- apply(minidata,1,shingles,k=8))
head(minhash.minidata <- minhash_v2(all_the_shingles, p=10))
shingles("Alexander",2)
shingles("Alexander Smith", 2)
primest(1, 5)
primest(1, 17)
#'
rhash_funcs(1, 1, vector.valued=FALSE, perfect=FALSE)
block_setup_v2(r.set = RLdata500[1:3,c(-2)], b=22, save_signature=FALSE, k=2)
r.set = RLdata500[1:3,c(-2)]
r.set
r.set <- RLdata500[1:3,c(-2)]
tlsh.blocks <- block_setup_v2(r.set = RLdata500[1:3,c(-2)], p=20, num.blocks=5, k=2)
tlsh.blocks <- block_setup_v2(r.set = RLdata500[1:3,c(-2)], b=22, save_signature=FALSE, k=2)
confusion.from.blocking(tlsh.blocks, identity.RLdata500)
tlsh.blocks <- block_setup_v2(r.set = RLdata500[1:500,c(-2)], b=22, save_signature=FALSE, k=2)
confusion.from.blocking(tlsh.blocks, identity.RLdata500)
confusion.from.blocking(tlsh.blocks, identity.RLdata500, recall.only=TRUE)
tlsh.blocks <- block_setup_v2(r.set = RLdata500[1:500,c(-2)], b=22, save_signature=FALSE, k=2)
block.ids.from.blocking(tlsh.blocks)
block.ids <- block.ids.from.blocking(tlsh.blocks)
reduction.ratio(block.ids)
tlsh.blocks <- block_setup_v2(r.set = RLdata500[1:500,c(-2)], b=22, save_signature=FALSE, k=2)
reduction.ratio.from.blocking(tlsh.blocks)
document()
document()
document()
document()
do_one_hash_and_record <- function(h, rec_col) {
# if (!timing) {
# 	updated_v <- vector_of_hash_funcs[[h]](rec_col)
# } else {
applying_hash <- (updated_v <- vector_of_hash_funcs[[h]](rec_col))[3]
# }
# if (!timing) {
# 	min_value <- min(updated_v)
# } else {
taking_min <- (min_value <- min(updated_v))[3]
# }
# if (timing) {
# 	print("Applying hash function")
# 	print(applying_hash)
# 	print("Getting values")
# 	print(getting_values)
# 	print("Taking the minimum")
# 	print(taking_min)
}
return(min_value)
}
head(data <- RLdata500[-c(2,4)][1:2,])
eval.blocksetup(data, k=5, b=22, key=identity.RLdata500[1:2,])
eval.blocksetup(data, k=5, b=22, key=identity.RLdata500)
eval.blocksetup(RLdata500, k=5, b=22, key=identity.RLdata500)
r.set <- RLdata500[1:3,c(-2)]
block_setup_v2(r.set = RLdata500[1:3,c(-2)], b=22, save_signature=FALSE, k=2)
eval.blocksetup(RLdata500, k=5, b=22, key=identity.RLdata500)
RLdata500
class(RLdata500)
class(identity.RLdata500)
eval.blocksetup <- function(dat, k=5, b=21, key){
#runtime <- as.numeric((mapping <- block_setup_v2(dat, b=b, k=k))[3] )
recall<- confusion.from.blocking (blocking=mapping,true_ids=key,recall.only=TRUE)[[1]]
return(data.frame(recall))
}
eval.blocksetup(RLdata500, k=2, b=22, key=identity.RLdata500)
eval.blocksetup <- function(dat, k=5, b=21, key){
#runtime <- as.numeric((mapping <- block_setup_v2(dat, b=b, k=k))[3] )
mapping <- block_setup_v2(dat, b=b, k=k))
recall<- confusion.from.blocking (blocking=mapping,true_ids=key,recall.only=TRUE)[[1]]
return(data.frame(recall))
}
eval.blocksetup <- function(dat, k=5, b=21, key){
#runtime <- as.numeric((mapping <- block_setup_v2(dat, b=b, k=k))[3] )
mapping <- block_setup_v2(dat, b=b, k=k)
recall<- confusion.from.blocking (blocking=mapping,true_ids=key,recall.only=TRUE)[[1]]
return(data.frame(recall))
}
eval.blocksetup(RLdata500, k=2, b=22, key=identity.RLdata500)
